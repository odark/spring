<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
		
	<!-- dao추가될때마다 매번 bean id 설정추가하는게 귀찮아서 controller찾듯이 아래처럼 설정한다. -->	
	<context:component-scan base-package="com.odark.dao">
		<!-- 해당 base패키지에 controller 어노테이션 클래스를 제외한 모든 어노테이션이 있을때 spring 빈으로 등록하라고 지정해주는의미 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>	

	<!-- was기반(tomcat)으로 뜰때 어노테이션을 읽을 수 있도록 설정함. test할때는 상관없음 spring mvc설정기반파일인 
		odarkMVC-servlet.xml의 어노테이션 읽을수 있는거와 구별해야함. 그건 controller를 어떤 기반으로 읽을지에 대한, 
		즉 어노테이션기반으로 읽을지에 대한 설정이다.<mvc:annotation-driven /> -->
	<context:annotation-config />		

	<!-- Database 설정 properteis파일 Read -->
	<context:property-placeholder location="classpath:application-properties.xml" />

	<!-- 아파치 commons-dbcp에 있는 database구연체는 아래와 같다. -->
	<!-- p옵션은 setter 인젝션 -->
	<!--<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" 
		p:driverClassName="${database.driverClassName}" p:url="${database.url}" p:username="${database.username}" 
		p:password="${database.password}" /> -->

	<!-- JNDI 설정 -->
	<!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> 
		<property name="jndiName"> <value>java:comp/env/jdbc/dbMyShop</value> </property> 
		</bean> -->

	<!-- connection pooling 중 spring-jdbc또는 apache에서 제공하는 commons-dbcp 라이브러리를 
		이용해도 상관없다. -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.SimpleDriverDataSource"
		p:driverClass="${database.driverClass}" p:url="${database.url}"
		p:username="${database.username}" p:password="${database.password}" />
	<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource" 
		> <property name="driverClass" value="com.mysql.jdbc.Driver"/> <property 
		name="url" value="${database.url}"/> <property name="username" value="${database.username}"/> 
		<property name="password" value="${database.password}"/> </bean> -->

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="dataSource" p:configLocation="classpath:/mybatis-config.xml" />

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- 트랜잭션추가 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />

	<!-- 트랜잭션처리를 어노테이션기반으로 트랜잭션처리가 가능하도록 하기 위해 tx추가 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 아래처럼 빈등록 선언하지 않으면 해당 빈에서 @Repository 선언해주면됨. -->
	<!-- 자동으로 클래스 이름 기준으로 생성됨을 알수 있고 @Respository(name="odarkDao") 로 선언하면 @Resource(name="odarkDao")로 @Autowired 또는 @Inject하지 
	않아도 주입이 가능하다. -->
	<!-- <bean id="userDao" class="com.odark.dao.users.UserDao" /> -->

</beans>
